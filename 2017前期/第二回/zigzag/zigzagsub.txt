int Tx1=10;
int Ty1=10;
int Tx2=30;
int Ty2=5;
int Tx3=Tx2;
int Ty3=15;
int trihigh=Ty3-Ty2;
int i=0;
int j=8;
int length;
PGraphics basic;
void setup() {
  size(1100, 480);
  noStroke();
  background(#cccccc);
  fill(#000080);
  translate(20,10);
  Bigline big=new Bigline();
  basic = createGraphics(((Tx2-Tx1)*2)*j-(Tx2-Tx1),(Ty3-Ty2)*j-(Ty3-Ty2)/2);
  basic.beginDraw();
  basic.noStroke();
  basic.background(#cccccc);
  big.AsingleLine();
  translate(Tx1,0);
 }
 class Bigline{
  /*太い模様一列分の処理
 Tx1~Ty3 最初の三角形の情報
 */
void onepack() {
  /*
  三角形を横に４つ
  三角20*50
  ウィンドウ1100*480
  */
  fill(#ffffff);
  triangle(Tx1, Ty1, Tx2, Ty2, Tx3, Ty3);
  fill(#ffff00);
  triangle(Tx1+(Tx2-Tx1)*2,Ty1,Tx2,Ty2,Tx3,Ty3);
  fill(#000000);
  triangle(Tx3,Ty3,Tx1+(Tx2-Tx1)*2,Ty1,Tx1+(Tx2-Tx1)*2,Ty3+((Ty3-Ty2)/2));
  fill(#0000ff);
  triangle(Tx3+(Tx2-Tx1)*2,Ty3,Tx1+(Tx2-Tx1)*2,Ty1,Tx1+(Tx2-Tx1)*2,Ty3+((Ty3-Ty2)/2));
  fill(#ffffff);
  /*
  triangle(tripart[0], tripart[1], tripart[2], tripart[3], tripart[4], tripart[5]);
  fill(#ffff00);
  triangle(tripart[0]+(tripart[2]-tripart[1])*2,tripart[1],tripart[2],tripart[3],tripart[4],tripart[5]);
  fill(#000000);
  triangle(tripart[4],tripart[5],tripart[0]+(tripart[2]-tripart[0])*2,tripart[1],tripart[0]+(tripart[2]-tripart[0])*2,tripart[5]+((tripart[5]-tripart[3])/2));
  fill(#0000ff);
  triangle(tripart[4]+(tripart[2]-tripart[0])*2,tripart[5],tripart[0]+(tripart[2]-tripart[0])*2,tripart[1],tripart[0]+(tripart[2]-tripart[0])*2,tripart[5]+((tripart[5]-tripart[3])/2));*/
}
void fourbyfour(){
  //onepackを縦に４つ
 for(int i=0;i<4;i++){
   Ty1=Ty1+trihigh;
   Ty2=Ty2+trihigh;
   Ty3=Ty3+trihigh;
   onepack();
   }
   Ty1=Ty1-trihigh*4;
   Ty2=Ty2-trihigh*4;
   Ty3=Ty3-trihigh*4;
 }
void AsingleLine(){
  //横一列
  for(j=i;j>0;j--){
  fourbyfour();
  translate((Tx2-Tx1)*2,0);}
  resetMatrix();
 }
}

